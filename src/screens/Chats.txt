
import React, { use, useEffect, useMemo } from "react";
import styles from "../styles/chatpage.css";
import AllChats from "../components/chat/AllChats";
import CurrentChat from "../components/chat/CurrentChat";
import NoChat from "../components/chat/NoChat";
import io from "socket.io-client";
import { useAppSelector } from "../redux/store";
import { toast } from "react-toastify";
import { useDispatch } from "react-redux";
import { useNavigate } from "react-router-dom";

let apiurl = `${process.env.REACT_APP_API_URL}`;
// TODO: SOCKET
let socket = null;



const Chats = () => {
  const auth = useAppSelector((state) => state.authReducer);

  // TODO: chatRedux
  const chatRedux = useAppSelector((state) => state.chatReducer);
  const dispatch = useDispatch()
  const navigate = useNavigate();
  const [currentChatId, setCurrentChatId] = React.useState(null);
  const [allMessages, setAllMessages] = React.useState([]);
  const [selectedChat, setSelectedChat] = React.useState(null);
  const [contacts, setContacts] = React.useState([]);
  const [message, setMessage] = React.useState("");



  // TODO: SOCKET
  socket = useMemo(() => io(apiurl), []);




  const getSelectedChat = async () => {
    let data = await fetch(process.env.REACT_APP_API_URL + '/chat/accesschatbyid', {
      method: 'POST',
      headers: {
        'Content-Type': 'application/json'
      },
      credentials: 'include',
      body: JSON.stringify({ chatId: currentChatId })
    })

    let chat = await data.json()


    if (chat.ok) {
      selectedChat?._id && socket.emit('leaveroom', selectedChat._id);
      setSelectedChat(chat.data)
      console.log("selected chat called", chat.data)
      // TODO: ADD CHAT TO REDUX

      // dispatch(setChatRedux(chat.data))

      // TODO: SOCKET
      socket.emit('joinroom', chat.data._id)
    }
    else {
      toast.error(chat.message)
    }
  };
  const getChatMessages = async () => {
    console.log("getChatMessages", currentChatId);
    let res = await fetch(process.env.REACT_APP_API_URL + '/chat/fetchmessages/' + currentChatId, {
      method: 'GET',
      headers: {
        'Content-Type': 'application/json'
      },
      credentials: 'include'
    })

    let data = await res.json();

    if (data.ok && data.data.length > 0) {
      console.log('MESSAGES ', data.data)
      setAllMessages(data.data)
    }
    else {
      setAllMessages([])
    }
  };
  const sendMessage = async () => {
    let res = await fetch(apiurl + '/chat/sendmessage', {
      method: 'POST',
      headers: {
        'Content-Type': 'application/json'
      },
      body: JSON.stringify({
        chatId: currentChatId,
        content: message
      }),
      credentials: 'include'
    })

    let data = await res.json()
    if (data.ok) {
      setMessage("")
      setAllMessages((prev) => {
        if (Array.isArray(prev)) {
          let newMessages = [...prev, data.data];
          return newMessages;
        }
        else {
          return [data.data];
        }
      })

      socket.emit("stop typing", currentChatId);
      socket.emit("messageSend", data.data)
      fetchContacts()
    }
    else {
      toast.error(data.message)
    }
  };
  const fetchContacts = async () => {

    let res = await fetch(apiurl + '/chat/fetchchats', {
      method: 'GET',
      headers: {
        'Content-Type': 'application/json'
      },
      credentials: 'include'
    })

    let data = await res.json()
    // console.log('FETCH CONTACTS',data)

    if (data.ok) {
      setContacts(data.data)
    }
    else {
      toast.error(data.message)
    }
  };

  React.useEffect(() => {
    fetchContacts();
  }, []);



  useEffect(() => {
    if (currentChatId) {
      setAllMessages([])
      getChatMessages()
      getSelectedChat()
    }
  }, [currentChatId])



  useEffect(() => {
    if (!auth?.isAuth) {
      return navigate("/login");
    }
    socket.on("connect", () => {
      console.log("connected ", socket.id);
    })
    socket.emit("joinownuserid", auth.user._id)
    socket.emit("userOnline", auth.user._id);
    socket.on("refetchcontacts", () => {
      console.log("refetch contacts called")
      fetchContacts()
    })

  }, [])


  useEffect(() => {
    socket.on("messageReceived", (data) => {
      console.log("new message recieved")

      let oldmessages = allMessages
      let newmessages = [...oldmessages, data]
      console.log("old messages", oldmessages)
      console.log("new messages", newmessages)

      setAllMessages(newmessages)
    })
  })


  useEffect(() => {
    if (!auth || !auth.user || !auth.user._id) return;

    const handleBeforeUnload = (event) => {
      event.preventDefault();
      event.returnValue = ''; // Prompt user before closing
      socket.emit("userOffline", auth.user._id); // Emit userOffline event
    };

    window.addEventListener("beforeunload", handleBeforeUnload);

    return () => {
      window.removeEventListener("beforeunload", handleBeforeUnload);
    };
  }, [auth]);




  return (
    <div className={styles.chatpage}>
      <div className={styles.left}>
        <AllChats
          setCurrentChatId={setCurrentChatId}
          contacts={contacts}
          setContacts={setContacts}
          fetchContacts={fetchContacts}
        />
      </div>
      <div className={styles.right}>
        {currentChatId && auth.user ? (
          <CurrentChat
            currentChatId={currentChatId}
            selectedChat={selectedChat}
            allMessages={allMessages}
            setAllMessages={setAllMessages}
            message={message}
            setMessage={setMessage}
            sendMessage={sendMessage}
            socket={socket}
            auth={auth} // Pass auth as a prop to ensure it's defined
          />
        ) : (
          <NoChat />
        )}
      </div>
    </div>
  );
};

export default Chats;
